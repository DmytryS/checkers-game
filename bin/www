#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('checkersapp:server');
var http = require('http');
var socketIo = require('socket.io');
var axios = require('axios');
require('dotenv').config();

var api = require('../routes/api');
var gamesList = [];
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = socketIo(server); // < Interesting!

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
    console.log("Server listening " + process.env.PORT);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 *  SocketIo
 */

io.on("connection", socket => {
    console.log("New client connected");

    socket.on("get board", api.getBoard(socket, gamesList));
    socket.on("get role", api.getRole(socket, gamesList));
    socket.on("get turn", api.getTurn(socket, gamesList));
    socket.on("move to", api.makeMove(socket, gamesList));
    socket.on("get games list", api.getGamesList(socket, gamesList));
    socket.on("connect game", api.connectGame(socket, gamesList));
    socket.on("disconnect game", api.disconnectGame(socket, gamesList));
    socket.on("surrender", api.surrender(socket, gamesList));

    /*
        TODO Send time left
     */

    socket.on("disconnect", () => console.log("Client disconnected"));
});


